// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ServerMessage {

namespace {

const ::google::protobuf::Descriptor* ServerInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Playerinfromation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Playerinfromation_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdditionalInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdditionalInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerMessage_2eproto() {
  protobuf_AddDesc_ServerMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ServerInformation_descriptor_ = file->message_type(0);
  static const int ServerInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInformation, serverinformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInformation, messagenumber_),
  };
  ServerInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInformation_descriptor_,
      ServerInformation::default_instance_,
      ServerInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInformation));
  Vector2f_descriptor_ = file->message_type(1);
  static const int Vector2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, posx_),
  };
  Vector2f_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2f_descriptor_,
      Vector2f::default_instance_,
      Vector2f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2f));
  Playerinfromation_descriptor_ = file->message_type(2);
  static const int Playerinfromation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playerinfromation, playernumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playerinfromation, possition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playerinfromation, playerscore_),
  };
  Playerinfromation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Playerinfromation_descriptor_,
      Playerinfromation::default_instance_,
      Playerinfromation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playerinfromation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playerinfromation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Playerinfromation));
  BallInformation_descriptor_ = file->message_type(3);
  static const int BallInformation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInformation, possition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInformation, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInformation, velocity_),
  };
  BallInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallInformation_descriptor_,
      BallInformation::default_instance_,
      BallInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallInformation));
  AdditionalInformation_descriptor_ = file->message_type(4);
  static const int AdditionalInformation_offsets_[1] = {
  };
  AdditionalInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdditionalInformation_descriptor_,
      AdditionalInformation::default_instance_,
      AdditionalInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdditionalInformation));
  ServerMessage_descriptor_ = file->message_type(5);
  static const int ServerMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, playersconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, serverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, playerone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, playertwo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, playernumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, ballinformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, additioanlinfo_),
  };
  ServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerMessage_descriptor_,
      ServerMessage::default_instance_,
      ServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInformation_descriptor_, &ServerInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2f_descriptor_, &Vector2f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Playerinfromation_descriptor_, &Playerinfromation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallInformation_descriptor_, &BallInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdditionalInformation_descriptor_, &AdditionalInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerMessage_descriptor_, &ServerMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerMessage_2eproto() {
  delete ServerInformation::default_instance_;
  delete ServerInformation_reflection_;
  delete Vector2f::default_instance_;
  delete Vector2f_reflection_;
  delete Playerinfromation::default_instance_;
  delete Playerinfromation_reflection_;
  delete BallInformation::default_instance_;
  delete BallInformation_reflection_;
  delete AdditionalInformation::default_instance_;
  delete AdditionalInformation_reflection_;
  delete ServerMessage::default_instance_;
  delete ServerMessage_reflection_;
}

void protobuf_AddDesc_ServerMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ServerMessage.proto\022\rServerMessage\"E\n\021"
    "ServerInformation\022\031\n\021serverInformation\030\001"
    " \002(\005\022\025\n\rmessageNumber\030\002 \002(\003\"&\n\010Vector2f\022"
    "\014\n\004posY\030\001 \002(\002\022\014\n\004posX\030\002 \002(\002\"j\n\021Playerinf"
    "romation\022\024\n\014playerNumber\030\001 \002(\005\022*\n\tpossit"
    "ion\030\003 \002(\0132\027.ServerMessage.Vector2f\022\023\n\013pl"
    "ayerScore\030\002 \002(\005\"w\n\017BallInformation\022*\n\tpo"
    "ssition\030\001 \002(\0132\027.ServerMessage.Vector2f\022\r"
    "\n\005angle\030\002 \002(\002\022)\n\010velocity\030\003 \002(\0132\027.Server"
    "Message.Vector2f\"\027\n\025AdditionalInformatio"
    "n\"\326\002\n\rServerMessage\022\030\n\020playersConnected\030"
    "\001 \002(\005\0224\n\nserverinfo\030\002 \002(\0132 .ServerMessag"
    "e.ServerInformation\0223\n\tplayerOne\030\003 \002(\0132 "
    ".ServerMessage.Playerinfromation\0223\n\tplay"
    "erTwo\030\004 \002(\0132 .ServerMessage.Playerinfrom"
    "ation\022\024\n\014playerNumber\030\005 \002(\005\0227\n\017ballInfor"
    "mation\030\006 \002(\0132\036.ServerMessage.BallInforma"
    "tion\022<\n\016additioanlInfo\030\010 \002(\0132$.ServerMes"
    "sage.AdditionalInformation", 746);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerMessage.proto", &protobuf_RegisterTypes);
  ServerInformation::default_instance_ = new ServerInformation();
  Vector2f::default_instance_ = new Vector2f();
  Playerinfromation::default_instance_ = new Playerinfromation();
  BallInformation::default_instance_ = new BallInformation();
  AdditionalInformation::default_instance_ = new AdditionalInformation();
  ServerMessage::default_instance_ = new ServerMessage();
  ServerInformation::default_instance_->InitAsDefaultInstance();
  Vector2f::default_instance_->InitAsDefaultInstance();
  Playerinfromation::default_instance_->InitAsDefaultInstance();
  BallInformation::default_instance_->InitAsDefaultInstance();
  AdditionalInformation::default_instance_->InitAsDefaultInstance();
  ServerMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerMessage_2eproto {
  StaticDescriptorInitializer_ServerMessage_2eproto() {
    protobuf_AddDesc_ServerMessage_2eproto();
  }
} static_descriptor_initializer_ServerMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServerInformation::kServerInformationFieldNumber;
const int ServerInformation::kMessageNumberFieldNumber;
#endif  // !_MSC_VER

ServerInformation::ServerInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMessage.ServerInformation)
}

void ServerInformation::InitAsDefaultInstance() {
}

ServerInformation::ServerInformation(const ServerInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerMessage.ServerInformation)
}

void ServerInformation::SharedCtor() {
  _cached_size_ = 0;
  serverinformation_ = 0;
  messagenumber_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInformation::~ServerInformation() {
  // @@protoc_insertion_point(destructor:ServerMessage.ServerInformation)
  SharedDtor();
}

void ServerInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInformation_descriptor_;
}

const ServerInformation& ServerInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMessage_2eproto();
  return *default_instance_;
}

ServerInformation* ServerInformation::default_instance_ = NULL;

ServerInformation* ServerInformation::New() const {
  return new ServerInformation;
}

void ServerInformation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerInformation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(messagenumber_, serverinformation_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerMessage.ServerInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverInformation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverinformation_)));
          set_has_serverinformation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_messageNumber;
        break;
      }

      // required int64 messageNumber = 2;
      case 2: {
        if (tag == 16) {
         parse_messageNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messagenumber_)));
          set_has_messagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerMessage.ServerInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerMessage.ServerInformation)
  return false;
#undef DO_
}

void ServerInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerMessage.ServerInformation)
  // required int32 serverInformation = 1;
  if (has_serverinformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverinformation(), output);
  }

  // required int64 messageNumber = 2;
  if (has_messagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->messagenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerMessage.ServerInformation)
}

::google::protobuf::uint8* ServerInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage.ServerInformation)
  // required int32 serverInformation = 1;
  if (has_serverinformation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverinformation(), target);
  }

  // required int64 messageNumber = 2;
  if (has_messagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->messagenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage.ServerInformation)
  return target;
}

int ServerInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverInformation = 1;
    if (has_serverinformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverinformation());
    }

    // required int64 messageNumber = 2;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->messagenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInformation::MergeFrom(const ServerInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverinformation()) {
      set_serverinformation(from.serverinformation());
    }
    if (from.has_messagenumber()) {
      set_messagenumber(from.messagenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInformation::CopyFrom(const ServerInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerInformation::Swap(ServerInformation* other) {
  if (other != this) {
    std::swap(serverinformation_, other->serverinformation_);
    std::swap(messagenumber_, other->messagenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInformation_descriptor_;
  metadata.reflection = ServerInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector2f::kPosYFieldNumber;
const int Vector2f::kPosXFieldNumber;
#endif  // !_MSC_VER

Vector2f::Vector2f()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMessage.Vector2f)
}

void Vector2f::InitAsDefaultInstance() {
}

Vector2f::Vector2f(const Vector2f& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerMessage.Vector2f)
}

void Vector2f::SharedCtor() {
  _cached_size_ = 0;
  posy_ = 0;
  posx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:ServerMessage.Vector2f)
  SharedDtor();
}

void Vector2f::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2f_descriptor_;
}

const Vector2f& Vector2f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMessage_2eproto();
  return *default_instance_;
}

Vector2f* Vector2f::default_instance_ = NULL;

Vector2f* Vector2f::New() const {
  return new Vector2f;
}

void Vector2f::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector2f*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(posy_, posx_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerMessage.Vector2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float posY = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_posX;
        break;
      }

      // required float posX = 2;
      case 2: {
        if (tag == 21) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerMessage.Vector2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerMessage.Vector2f)
  return false;
#undef DO_
}

void Vector2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerMessage.Vector2f)
  // required float posY = 1;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->posy(), output);
  }

  // required float posX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerMessage.Vector2f)
}

::google::protobuf::uint8* Vector2f::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage.Vector2f)
  // required float posY = 1;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->posy(), target);
  }

  // required float posX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage.Vector2f)
  return target;
}

int Vector2f::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float posY = 1;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float posX = 2;
    if (has_posx()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2f::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2f* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2f*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2f::MergeFrom(const Vector2f& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2f::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2f::CopyFrom(const Vector2f& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Vector2f::Swap(Vector2f* other) {
  if (other != this) {
    std::swap(posy_, other->posy_);
    std::swap(posx_, other->posx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2f_descriptor_;
  metadata.reflection = Vector2f_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Playerinfromation::kPlayerNumberFieldNumber;
const int Playerinfromation::kPossitionFieldNumber;
const int Playerinfromation::kPlayerScoreFieldNumber;
#endif  // !_MSC_VER

Playerinfromation::Playerinfromation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMessage.Playerinfromation)
}

void Playerinfromation::InitAsDefaultInstance() {
  possition_ = const_cast< ::ServerMessage::Vector2f*>(&::ServerMessage::Vector2f::default_instance());
}

Playerinfromation::Playerinfromation(const Playerinfromation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerMessage.Playerinfromation)
}

void Playerinfromation::SharedCtor() {
  _cached_size_ = 0;
  playernumber_ = 0;
  possition_ = NULL;
  playerscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Playerinfromation::~Playerinfromation() {
  // @@protoc_insertion_point(destructor:ServerMessage.Playerinfromation)
  SharedDtor();
}

void Playerinfromation::SharedDtor() {
  if (this != default_instance_) {
    delete possition_;
  }
}

void Playerinfromation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Playerinfromation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Playerinfromation_descriptor_;
}

const Playerinfromation& Playerinfromation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMessage_2eproto();
  return *default_instance_;
}

Playerinfromation* Playerinfromation::default_instance_ = NULL;

Playerinfromation* Playerinfromation::New() const {
  return new Playerinfromation;
}

void Playerinfromation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Playerinfromation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(playernumber_, playerscore_);
    if (has_possition()) {
      if (possition_ != NULL) possition_->::ServerMessage::Vector2f::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Playerinfromation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerMessage.Playerinfromation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernumber_)));
          set_has_playernumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerScore;
        break;
      }

      // required int32 playerScore = 2;
      case 2: {
        if (tag == 16) {
         parse_playerScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerscore_)));
          set_has_playerscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_possition;
        break;
      }

      // required .ServerMessage.Vector2f possition = 3;
      case 3: {
        if (tag == 26) {
         parse_possition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_possition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerMessage.Playerinfromation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerMessage.Playerinfromation)
  return false;
#undef DO_
}

void Playerinfromation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerMessage.Playerinfromation)
  // required int32 playerNumber = 1;
  if (has_playernumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playernumber(), output);
  }

  // required int32 playerScore = 2;
  if (has_playerscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerscore(), output);
  }

  // required .ServerMessage.Vector2f possition = 3;
  if (has_possition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->possition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerMessage.Playerinfromation)
}

::google::protobuf::uint8* Playerinfromation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage.Playerinfromation)
  // required int32 playerNumber = 1;
  if (has_playernumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playernumber(), target);
  }

  // required int32 playerScore = 2;
  if (has_playerscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerscore(), target);
  }

  // required .ServerMessage.Vector2f possition = 3;
  if (has_possition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->possition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage.Playerinfromation)
  return target;
}

int Playerinfromation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerNumber = 1;
    if (has_playernumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernumber());
    }

    // required .ServerMessage.Vector2f possition = 3;
    if (has_possition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->possition());
    }

    // required int32 playerScore = 2;
    if (has_playerscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Playerinfromation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Playerinfromation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Playerinfromation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Playerinfromation::MergeFrom(const Playerinfromation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playernumber()) {
      set_playernumber(from.playernumber());
    }
    if (from.has_possition()) {
      mutable_possition()->::ServerMessage::Vector2f::MergeFrom(from.possition());
    }
    if (from.has_playerscore()) {
      set_playerscore(from.playerscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Playerinfromation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Playerinfromation::CopyFrom(const Playerinfromation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Playerinfromation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_possition()) {
    if (!this->possition().IsInitialized()) return false;
  }
  return true;
}

void Playerinfromation::Swap(Playerinfromation* other) {
  if (other != this) {
    std::swap(playernumber_, other->playernumber_);
    std::swap(possition_, other->possition_);
    std::swap(playerscore_, other->playerscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Playerinfromation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Playerinfromation_descriptor_;
  metadata.reflection = Playerinfromation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallInformation::kPossitionFieldNumber;
const int BallInformation::kAngleFieldNumber;
const int BallInformation::kVelocityFieldNumber;
#endif  // !_MSC_VER

BallInformation::BallInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMessage.BallInformation)
}

void BallInformation::InitAsDefaultInstance() {
  possition_ = const_cast< ::ServerMessage::Vector2f*>(&::ServerMessage::Vector2f::default_instance());
  velocity_ = const_cast< ::ServerMessage::Vector2f*>(&::ServerMessage::Vector2f::default_instance());
}

BallInformation::BallInformation(const BallInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerMessage.BallInformation)
}

void BallInformation::SharedCtor() {
  _cached_size_ = 0;
  possition_ = NULL;
  angle_ = 0;
  velocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallInformation::~BallInformation() {
  // @@protoc_insertion_point(destructor:ServerMessage.BallInformation)
  SharedDtor();
}

void BallInformation::SharedDtor() {
  if (this != default_instance_) {
    delete possition_;
    delete velocity_;
  }
}

void BallInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallInformation_descriptor_;
}

const BallInformation& BallInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMessage_2eproto();
  return *default_instance_;
}

BallInformation* BallInformation::default_instance_ = NULL;

BallInformation* BallInformation::New() const {
  return new BallInformation;
}

void BallInformation::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_possition()) {
      if (possition_ != NULL) possition_->::ServerMessage::Vector2f::Clear();
    }
    angle_ = 0;
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::ServerMessage::Vector2f::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerMessage.BallInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ServerMessage.Vector2f possition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_possition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_angle;
        break;
      }

      // required float angle = 2;
      case 2: {
        if (tag == 21) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // required .ServerMessage.Vector2f velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerMessage.BallInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerMessage.BallInformation)
  return false;
#undef DO_
}

void BallInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerMessage.BallInformation)
  // required .ServerMessage.Vector2f possition = 1;
  if (has_possition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->possition(), output);
  }

  // required float angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  // required .ServerMessage.Vector2f velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerMessage.BallInformation)
}

::google::protobuf::uint8* BallInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage.BallInformation)
  // required .ServerMessage.Vector2f possition = 1;
  if (has_possition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->possition(), target);
  }

  // required float angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  // required .ServerMessage.Vector2f velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage.BallInformation)
  return target;
}

int BallInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ServerMessage.Vector2f possition = 1;
    if (has_possition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->possition());
    }

    // required float angle = 2;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required .ServerMessage.Vector2f velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallInformation::MergeFrom(const BallInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_possition()) {
      mutable_possition()->::ServerMessage::Vector2f::MergeFrom(from.possition());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::ServerMessage::Vector2f::MergeFrom(from.velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallInformation::CopyFrom(const BallInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_possition()) {
    if (!this->possition().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  return true;
}

void BallInformation::Swap(BallInformation* other) {
  if (other != this) {
    std::swap(possition_, other->possition_);
    std::swap(angle_, other->angle_);
    std::swap(velocity_, other->velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallInformation_descriptor_;
  metadata.reflection = BallInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AdditionalInformation::AdditionalInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMessage.AdditionalInformation)
}

void AdditionalInformation::InitAsDefaultInstance() {
}

AdditionalInformation::AdditionalInformation(const AdditionalInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerMessage.AdditionalInformation)
}

void AdditionalInformation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdditionalInformation::~AdditionalInformation() {
  // @@protoc_insertion_point(destructor:ServerMessage.AdditionalInformation)
  SharedDtor();
}

void AdditionalInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdditionalInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdditionalInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdditionalInformation_descriptor_;
}

const AdditionalInformation& AdditionalInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMessage_2eproto();
  return *default_instance_;
}

AdditionalInformation* AdditionalInformation::default_instance_ = NULL;

AdditionalInformation* AdditionalInformation::New() const {
  return new AdditionalInformation;
}

void AdditionalInformation::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdditionalInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerMessage.AdditionalInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ServerMessage.AdditionalInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerMessage.AdditionalInformation)
  return false;
#undef DO_
}

void AdditionalInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerMessage.AdditionalInformation)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerMessage.AdditionalInformation)
}

::google::protobuf::uint8* AdditionalInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage.AdditionalInformation)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage.AdditionalInformation)
  return target;
}

int AdditionalInformation::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdditionalInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdditionalInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdditionalInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdditionalInformation::MergeFrom(const AdditionalInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdditionalInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalInformation::CopyFrom(const AdditionalInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalInformation::IsInitialized() const {

  return true;
}

void AdditionalInformation::Swap(AdditionalInformation* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdditionalInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdditionalInformation_descriptor_;
  metadata.reflection = AdditionalInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerMessage::kPlayersConnectedFieldNumber;
const int ServerMessage::kServerinfoFieldNumber;
const int ServerMessage::kPlayerOneFieldNumber;
const int ServerMessage::kPlayerTwoFieldNumber;
const int ServerMessage::kPlayerNumberFieldNumber;
const int ServerMessage::kBallInformationFieldNumber;
const int ServerMessage::kAdditioanlInfoFieldNumber;
#endif  // !_MSC_VER

ServerMessage::ServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMessage.ServerMessage)
}

void ServerMessage::InitAsDefaultInstance() {
  serverinfo_ = const_cast< ::ServerMessage::ServerInformation*>(&::ServerMessage::ServerInformation::default_instance());
  playerone_ = const_cast< ::ServerMessage::Playerinfromation*>(&::ServerMessage::Playerinfromation::default_instance());
  playertwo_ = const_cast< ::ServerMessage::Playerinfromation*>(&::ServerMessage::Playerinfromation::default_instance());
  ballinformation_ = const_cast< ::ServerMessage::BallInformation*>(&::ServerMessage::BallInformation::default_instance());
  additioanlinfo_ = const_cast< ::ServerMessage::AdditionalInformation*>(&::ServerMessage::AdditionalInformation::default_instance());
}

ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerMessage.ServerMessage)
}

void ServerMessage::SharedCtor() {
  _cached_size_ = 0;
  playersconnected_ = 0;
  serverinfo_ = NULL;
  playerone_ = NULL;
  playertwo_ = NULL;
  playernumber_ = 0;
  ballinformation_ = NULL;
  additioanlinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:ServerMessage.ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  if (this != default_instance_) {
    delete serverinfo_;
    delete playerone_;
    delete playertwo_;
    delete ballinformation_;
    delete additioanlinfo_;
  }
}

void ServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessage_descriptor_;
}

const ServerMessage& ServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerMessage_2eproto();
  return *default_instance_;
}

ServerMessage* ServerMessage::default_instance_ = NULL;

ServerMessage* ServerMessage::New() const {
  return new ServerMessage;
}

void ServerMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(playersconnected_, playernumber_);
    if (has_serverinfo()) {
      if (serverinfo_ != NULL) serverinfo_->::ServerMessage::ServerInformation::Clear();
    }
    if (has_playerone()) {
      if (playerone_ != NULL) playerone_->::ServerMessage::Playerinfromation::Clear();
    }
    if (has_playertwo()) {
      if (playertwo_ != NULL) playertwo_->::ServerMessage::Playerinfromation::Clear();
    }
    if (has_ballinformation()) {
      if (ballinformation_ != NULL) ballinformation_->::ServerMessage::BallInformation::Clear();
    }
    if (has_additioanlinfo()) {
      if (additioanlinfo_ != NULL) additioanlinfo_->::ServerMessage::AdditionalInformation::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerMessage.ServerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playersConnected = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playersconnected_)));
          set_has_playersconnected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serverinfo;
        break;
      }

      // required .ServerMessage.ServerInformation serverinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_serverinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerOne;
        break;
      }

      // required .ServerMessage.Playerinfromation playerOne = 3;
      case 3: {
        if (tag == 26) {
         parse_playerOne:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_playerTwo;
        break;
      }

      // required .ServerMessage.Playerinfromation playerTwo = 4;
      case 4: {
        if (tag == 34) {
         parse_playerTwo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playertwo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_playerNumber;
        break;
      }

      // required int32 playerNumber = 5;
      case 5: {
        if (tag == 40) {
         parse_playerNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernumber_)));
          set_has_playernumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ballInformation;
        break;
      }

      // required .ServerMessage.BallInformation ballInformation = 6;
      case 6: {
        if (tag == 50) {
         parse_ballInformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballinformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_additioanlInfo;
        break;
      }

      // required .ServerMessage.AdditionalInformation additioanlInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_additioanlInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_additioanlinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerMessage.ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerMessage.ServerMessage)
  return false;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerMessage.ServerMessage)
  // required int32 playersConnected = 1;
  if (has_playersconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playersconnected(), output);
  }

  // required .ServerMessage.ServerInformation serverinfo = 2;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->serverinfo(), output);
  }

  // required .ServerMessage.Playerinfromation playerOne = 3;
  if (has_playerone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerone(), output);
  }

  // required .ServerMessage.Playerinfromation playerTwo = 4;
  if (has_playertwo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->playertwo(), output);
  }

  // required int32 playerNumber = 5;
  if (has_playernumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playernumber(), output);
  }

  // required .ServerMessage.BallInformation ballInformation = 6;
  if (has_ballinformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ballinformation(), output);
  }

  // required .ServerMessage.AdditionalInformation additioanlInfo = 8;
  if (has_additioanlinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->additioanlinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerMessage.ServerMessage)
}

::google::protobuf::uint8* ServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage.ServerMessage)
  // required int32 playersConnected = 1;
  if (has_playersconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playersconnected(), target);
  }

  // required .ServerMessage.ServerInformation serverinfo = 2;
  if (has_serverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->serverinfo(), target);
  }

  // required .ServerMessage.Playerinfromation playerOne = 3;
  if (has_playerone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerone(), target);
  }

  // required .ServerMessage.Playerinfromation playerTwo = 4;
  if (has_playertwo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->playertwo(), target);
  }

  // required int32 playerNumber = 5;
  if (has_playernumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playernumber(), target);
  }

  // required .ServerMessage.BallInformation ballInformation = 6;
  if (has_ballinformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ballinformation(), target);
  }

  // required .ServerMessage.AdditionalInformation additioanlInfo = 8;
  if (has_additioanlinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->additioanlinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage.ServerMessage)
  return target;
}

int ServerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playersConnected = 1;
    if (has_playersconnected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playersconnected());
    }

    // required .ServerMessage.ServerInformation serverinfo = 2;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverinfo());
    }

    // required .ServerMessage.Playerinfromation playerOne = 3;
    if (has_playerone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerone());
    }

    // required .ServerMessage.Playerinfromation playerTwo = 4;
    if (has_playertwo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playertwo());
    }

    // required int32 playerNumber = 5;
    if (has_playernumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernumber());
    }

    // required .ServerMessage.BallInformation ballInformation = 6;
    if (has_ballinformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ballinformation());
    }

    // required .ServerMessage.AdditionalInformation additioanlInfo = 8;
    if (has_additioanlinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->additioanlinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playersconnected()) {
      set_playersconnected(from.playersconnected());
    }
    if (from.has_serverinfo()) {
      mutable_serverinfo()->::ServerMessage::ServerInformation::MergeFrom(from.serverinfo());
    }
    if (from.has_playerone()) {
      mutable_playerone()->::ServerMessage::Playerinfromation::MergeFrom(from.playerone());
    }
    if (from.has_playertwo()) {
      mutable_playertwo()->::ServerMessage::Playerinfromation::MergeFrom(from.playertwo());
    }
    if (from.has_playernumber()) {
      set_playernumber(from.playernumber());
    }
    if (from.has_ballinformation()) {
      mutable_ballinformation()->::ServerMessage::BallInformation::MergeFrom(from.ballinformation());
    }
    if (from.has_additioanlinfo()) {
      mutable_additioanlinfo()->::ServerMessage::AdditionalInformation::MergeFrom(from.additioanlinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_serverinfo()) {
    if (!this->serverinfo().IsInitialized()) return false;
  }
  if (has_playerone()) {
    if (!this->playerone().IsInitialized()) return false;
  }
  if (has_playertwo()) {
    if (!this->playertwo().IsInitialized()) return false;
  }
  if (has_ballinformation()) {
    if (!this->ballinformation().IsInitialized()) return false;
  }
  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other != this) {
    std::swap(playersconnected_, other->playersconnected_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(playerone_, other->playerone_);
    std::swap(playertwo_, other->playertwo_);
    std::swap(playernumber_, other->playernumber_);
    std::swap(ballinformation_, other->ballinformation_);
    std::swap(additioanlinfo_, other->additioanlinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMessage_descriptor_;
  metadata.reflection = ServerMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerMessage

// @@protoc_insertion_point(global_scope)
