// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ClientMessage {

namespace {

const ::google::protobuf::Descriptor* ClientInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* playerPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playerPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* Playerinfromation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Playerinfromation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Playerinfromation_PlayerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMessage_AdditioanlRequests_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientMessage_2eproto() {
  protobuf_AddDesc_ClientMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ClientInformation_descriptor_ = file->message_type(0);
  static const int ClientInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInformation, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInformation, messagenumber_),
  };
  ClientInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientInformation_descriptor_,
      ClientInformation::default_instance_,
      ClientInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientInformation));
  playerPos_descriptor_ = file->message_type(1);
  static const int playerPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerPos, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerPos, posx_),
  };
  playerPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playerPos_descriptor_,
      playerPos::default_instance_,
      playerPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playerPos));
  Playerinfromation_descriptor_ = file->message_type(2);
  static const int Playerinfromation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playerinfromation, playernumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playerinfromation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playerinfromation, pos_),
  };
  Playerinfromation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Playerinfromation_descriptor_,
      Playerinfromation::default_instance_,
      Playerinfromation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playerinfromation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playerinfromation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Playerinfromation));
  Playerinfromation_PlayerType_descriptor_ = Playerinfromation_descriptor_->enum_type(0);
  ClientMessage_descriptor_ = file->message_type(3);
  static const int ClientMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, clientinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, addiontalinfo_),
  };
  ClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_descriptor_,
      ClientMessage::default_instance_,
      ClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage));
  ClientMessage_AdditioanlRequests_descriptor_ = ClientMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientInformation_descriptor_, &ClientInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playerPos_descriptor_, &playerPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Playerinfromation_descriptor_, &Playerinfromation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_descriptor_, &ClientMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientMessage_2eproto() {
  delete ClientInformation::default_instance_;
  delete ClientInformation_reflection_;
  delete playerPos::default_instance_;
  delete playerPos_reflection_;
  delete Playerinfromation::default_instance_;
  delete Playerinfromation_reflection_;
  delete ClientMessage::default_instance_;
  delete ClientMessage_reflection_;
}

void protobuf_AddDesc_ClientMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ClientMessage.proto\022\rClientMessage\"A\n\021"
    "ClientInformation\022\025\n\rclientVersion\030\001 \002(\005"
    "\022\025\n\rmessageNumber\030\002 \002(\003\"\'\n\tplayerPos\022\014\n\004"
    "posY\030\001 \002(\002\022\014\n\004posX\030\002 \002(\002\"\314\001\n\021Playerinfro"
    "mation\022\024\n\014playerNumber\030\001 \002(\005\022E\n\004type\030\002 \002"
    "(\0162+.ClientMessage.Playerinfromation.Pla"
    "yerType:\nUnassigned\022%\n\003pos\030\003 \002(\0132\030.Clien"
    "tMessage.playerPos\"3\n\nPlayerType\022\n\n\006PacM"
    "an\020\001\022\t\n\005Ghost\020\002\022\016\n\nUnassigned\020\003\"\224\002\n\rClie"
    "ntMessage\0224\n\nclientinfo\030\001 \002(\0132 .ClientMe"
    "ssage.ClientInformation\0224\n\nplayerinfo\030\002 "
    "\002(\0132 .ClientMessage.Playerinfromation\022F\n"
    "\raddiontalInfo\030\003 \002(\0162/.ClientMessage.Cli"
    "entMessage.AdditioanlRequests\"O\n\022Additio"
    "anlRequests\022\010\n\004None\020\001\022\020\n\014FirstConnect\020\002\022"
    "\r\n\tReconnect\020\003\022\016\n\nDisconnect\020\004", 630);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientMessage.proto", &protobuf_RegisterTypes);
  ClientInformation::default_instance_ = new ClientInformation();
  playerPos::default_instance_ = new playerPos();
  Playerinfromation::default_instance_ = new Playerinfromation();
  ClientMessage::default_instance_ = new ClientMessage();
  ClientInformation::default_instance_->InitAsDefaultInstance();
  playerPos::default_instance_->InitAsDefaultInstance();
  Playerinfromation::default_instance_->InitAsDefaultInstance();
  ClientMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientMessage_2eproto {
  StaticDescriptorInitializer_ClientMessage_2eproto() {
    protobuf_AddDesc_ClientMessage_2eproto();
  }
} static_descriptor_initializer_ClientMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientInformation::kClientVersionFieldNumber;
const int ClientInformation::kMessageNumberFieldNumber;
#endif  // !_MSC_VER

ClientInformation::ClientInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.ClientInformation)
}

void ClientInformation::InitAsDefaultInstance() {
}

ClientInformation::ClientInformation(const ClientInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientMessage.ClientInformation)
}

void ClientInformation::SharedCtor() {
  _cached_size_ = 0;
  clientversion_ = 0;
  messagenumber_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientInformation::~ClientInformation() {
  // @@protoc_insertion_point(destructor:ClientMessage.ClientInformation)
  SharedDtor();
}

void ClientInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientInformation_descriptor_;
}

const ClientInformation& ClientInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessage_2eproto();
  return *default_instance_;
}

ClientInformation* ClientInformation::default_instance_ = NULL;

ClientInformation* ClientInformation::New() const {
  return new ClientInformation;
}

void ClientInformation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientInformation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(messagenumber_, clientversion_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientMessage.ClientInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clientVersion = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_messageNumber;
        break;
      }

      // required int64 messageNumber = 2;
      case 2: {
        if (tag == 16) {
         parse_messageNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messagenumber_)));
          set_has_messagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientMessage.ClientInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientMessage.ClientInformation)
  return false;
#undef DO_
}

void ClientInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientMessage.ClientInformation)
  // required int32 clientVersion = 1;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientversion(), output);
  }

  // required int64 messageNumber = 2;
  if (has_messagenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->messagenumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientMessage.ClientInformation)
}

::google::protobuf::uint8* ClientInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.ClientInformation)
  // required int32 clientVersion = 1;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientversion(), target);
  }

  // required int64 messageNumber = 2;
  if (has_messagenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->messagenumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.ClientInformation)
  return target;
}

int ClientInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 clientVersion = 1;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientversion());
    }

    // required int64 messageNumber = 2;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->messagenumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientInformation::MergeFrom(const ClientInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_messagenumber()) {
      set_messagenumber(from.messagenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInformation::CopyFrom(const ClientInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientInformation::Swap(ClientInformation* other) {
  if (other != this) {
    std::swap(clientversion_, other->clientversion_);
    std::swap(messagenumber_, other->messagenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientInformation_descriptor_;
  metadata.reflection = ClientInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playerPos::kPosYFieldNumber;
const int playerPos::kPosXFieldNumber;
#endif  // !_MSC_VER

playerPos::playerPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.playerPos)
}

void playerPos::InitAsDefaultInstance() {
}

playerPos::playerPos(const playerPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientMessage.playerPos)
}

void playerPos::SharedCtor() {
  _cached_size_ = 0;
  posy_ = 0;
  posx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playerPos::~playerPos() {
  // @@protoc_insertion_point(destructor:ClientMessage.playerPos)
  SharedDtor();
}

void playerPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void playerPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playerPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerPos_descriptor_;
}

const playerPos& playerPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessage_2eproto();
  return *default_instance_;
}

playerPos* playerPos::default_instance_ = NULL;

playerPos* playerPos::New() const {
  return new playerPos;
}

void playerPos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<playerPos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(posy_, posx_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playerPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientMessage.playerPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float posY = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_posX;
        break;
      }

      // required float posX = 2;
      case 2: {
        if (tag == 21) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientMessage.playerPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientMessage.playerPos)
  return false;
#undef DO_
}

void playerPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientMessage.playerPos)
  // required float posY = 1;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->posy(), output);
  }

  // required float posX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientMessage.playerPos)
}

::google::protobuf::uint8* playerPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.playerPos)
  // required float posY = 1;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->posy(), target);
  }

  // required float posX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.playerPos)
  return target;
}

int playerPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float posY = 1;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float posX = 2;
    if (has_posx()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playerPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playerPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playerPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playerPos::MergeFrom(const playerPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playerPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playerPos::CopyFrom(const playerPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playerPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void playerPos::Swap(playerPos* other) {
  if (other != this) {
    std::swap(posy_, other->posy_);
    std::swap(posx_, other->posx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playerPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playerPos_descriptor_;
  metadata.reflection = playerPos_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Playerinfromation_PlayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Playerinfromation_PlayerType_descriptor_;
}
bool Playerinfromation_PlayerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Playerinfromation_PlayerType Playerinfromation::PacMan;
const Playerinfromation_PlayerType Playerinfromation::Ghost;
const Playerinfromation_PlayerType Playerinfromation::Unassigned;
const Playerinfromation_PlayerType Playerinfromation::PlayerType_MIN;
const Playerinfromation_PlayerType Playerinfromation::PlayerType_MAX;
const int Playerinfromation::PlayerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Playerinfromation::kPlayerNumberFieldNumber;
const int Playerinfromation::kTypeFieldNumber;
const int Playerinfromation::kPosFieldNumber;
#endif  // !_MSC_VER

Playerinfromation::Playerinfromation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.Playerinfromation)
}

void Playerinfromation::InitAsDefaultInstance() {
  pos_ = const_cast< ::ClientMessage::playerPos*>(&::ClientMessage::playerPos::default_instance());
}

Playerinfromation::Playerinfromation(const Playerinfromation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientMessage.Playerinfromation)
}

void Playerinfromation::SharedCtor() {
  _cached_size_ = 0;
  playernumber_ = 0;
  type_ = 3;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Playerinfromation::~Playerinfromation() {
  // @@protoc_insertion_point(destructor:ClientMessage.Playerinfromation)
  SharedDtor();
}

void Playerinfromation::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void Playerinfromation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Playerinfromation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Playerinfromation_descriptor_;
}

const Playerinfromation& Playerinfromation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessage_2eproto();
  return *default_instance_;
}

Playerinfromation* Playerinfromation::default_instance_ = NULL;

Playerinfromation* Playerinfromation::New() const {
  return new Playerinfromation;
}

void Playerinfromation::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    playernumber_ = 0;
    type_ = 3;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::ClientMessage::playerPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Playerinfromation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientMessage.Playerinfromation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernumber_)));
          set_has_playernumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .ClientMessage.Playerinfromation.PlayerType type = 2 [default = Unassigned];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ClientMessage::Playerinfromation_PlayerType_IsValid(value)) {
            set_type(static_cast< ::ClientMessage::Playerinfromation_PlayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .ClientMessage.playerPos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientMessage.Playerinfromation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientMessage.Playerinfromation)
  return false;
#undef DO_
}

void Playerinfromation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientMessage.Playerinfromation)
  // required int32 playerNumber = 1;
  if (has_playernumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playernumber(), output);
  }

  // required .ClientMessage.Playerinfromation.PlayerType type = 2 [default = Unassigned];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .ClientMessage.playerPos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientMessage.Playerinfromation)
}

::google::protobuf::uint8* Playerinfromation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.Playerinfromation)
  // required int32 playerNumber = 1;
  if (has_playernumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playernumber(), target);
  }

  // required .ClientMessage.Playerinfromation.PlayerType type = 2 [default = Unassigned];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .ClientMessage.playerPos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.Playerinfromation)
  return target;
}

int Playerinfromation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerNumber = 1;
    if (has_playernumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernumber());
    }

    // required .ClientMessage.Playerinfromation.PlayerType type = 2 [default = Unassigned];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .ClientMessage.playerPos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Playerinfromation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Playerinfromation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Playerinfromation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Playerinfromation::MergeFrom(const Playerinfromation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playernumber()) {
      set_playernumber(from.playernumber());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::ClientMessage::playerPos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Playerinfromation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Playerinfromation::CopyFrom(const Playerinfromation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Playerinfromation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void Playerinfromation::Swap(Playerinfromation* other) {
  if (other != this) {
    std::swap(playernumber_, other->playernumber_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Playerinfromation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Playerinfromation_descriptor_;
  metadata.reflection = Playerinfromation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientMessage_AdditioanlRequests_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_AdditioanlRequests_descriptor_;
}
bool ClientMessage_AdditioanlRequests_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientMessage_AdditioanlRequests ClientMessage::None;
const ClientMessage_AdditioanlRequests ClientMessage::FirstConnect;
const ClientMessage_AdditioanlRequests ClientMessage::Reconnect;
const ClientMessage_AdditioanlRequests ClientMessage::Disconnect;
const ClientMessage_AdditioanlRequests ClientMessage::AdditioanlRequests_MIN;
const ClientMessage_AdditioanlRequests ClientMessage::AdditioanlRequests_MAX;
const int ClientMessage::AdditioanlRequests_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientMessage::kClientinfoFieldNumber;
const int ClientMessage::kPlayerinfoFieldNumber;
const int ClientMessage::kAddiontalInfoFieldNumber;
#endif  // !_MSC_VER

ClientMessage::ClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.ClientMessage)
}

void ClientMessage::InitAsDefaultInstance() {
  clientinfo_ = const_cast< ::ClientMessage::ClientInformation*>(&::ClientMessage::ClientInformation::default_instance());
  playerinfo_ = const_cast< ::ClientMessage::Playerinfromation*>(&::ClientMessage::Playerinfromation::default_instance());
}

ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientMessage.ClientMessage)
}

void ClientMessage::SharedCtor() {
  _cached_size_ = 0;
  clientinfo_ = NULL;
  playerinfo_ = NULL;
  addiontalinfo_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:ClientMessage.ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (this != default_instance_) {
    delete clientinfo_;
    delete playerinfo_;
  }
}

void ClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_descriptor_;
}

const ClientMessage& ClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMessage_2eproto();
  return *default_instance_;
}

ClientMessage* ClientMessage::default_instance_ = NULL;

ClientMessage* ClientMessage::New() const {
  return new ClientMessage;
}

void ClientMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_clientinfo()) {
      if (clientinfo_ != NULL) clientinfo_->::ClientMessage::ClientInformation::Clear();
    }
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::ClientMessage::Playerinfromation::Clear();
    }
    addiontalinfo_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientMessage.ClientMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ClientMessage.ClientInformation clientinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerinfo;
        break;
      }

      // required .ClientMessage.Playerinfromation playerinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_playerinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addiontalInfo;
        break;
      }

      // required .ClientMessage.ClientMessage.AdditioanlRequests addiontalInfo = 3;
      case 3: {
        if (tag == 24) {
         parse_addiontalInfo:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ClientMessage::ClientMessage_AdditioanlRequests_IsValid(value)) {
            set_addiontalinfo(static_cast< ::ClientMessage::ClientMessage_AdditioanlRequests >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientMessage.ClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientMessage.ClientMessage)
  return false;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientMessage.ClientMessage)
  // required .ClientMessage.ClientInformation clientinfo = 1;
  if (has_clientinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clientinfo(), output);
  }

  // required .ClientMessage.Playerinfromation playerinfo = 2;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerinfo(), output);
  }

  // required .ClientMessage.ClientMessage.AdditioanlRequests addiontalInfo = 3;
  if (has_addiontalinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->addiontalinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientMessage.ClientMessage)
}

::google::protobuf::uint8* ClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.ClientMessage)
  // required .ClientMessage.ClientInformation clientinfo = 1;
  if (has_clientinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clientinfo(), target);
  }

  // required .ClientMessage.Playerinfromation playerinfo = 2;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerinfo(), target);
  }

  // required .ClientMessage.ClientMessage.AdditioanlRequests addiontalInfo = 3;
  if (has_addiontalinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->addiontalinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.ClientMessage)
  return target;
}

int ClientMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ClientMessage.ClientInformation clientinfo = 1;
    if (has_clientinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientinfo());
    }

    // required .ClientMessage.Playerinfromation playerinfo = 2;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

    // required .ClientMessage.ClientMessage.AdditioanlRequests addiontalInfo = 3;
    if (has_addiontalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->addiontalinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientinfo()) {
      mutable_clientinfo()->::ClientMessage::ClientInformation::MergeFrom(from.clientinfo());
    }
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::ClientMessage::Playerinfromation::MergeFrom(from.playerinfo());
    }
    if (from.has_addiontalinfo()) {
      set_addiontalinfo(from.addiontalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_clientinfo()) {
    if (!this->clientinfo().IsInitialized()) return false;
  }
  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other != this) {
    std::swap(clientinfo_, other->clientinfo_);
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(addiontalinfo_, other->addiontalinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_descriptor_;
  metadata.reflection = ClientMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClientMessage

// @@protoc_insertion_point(global_scope)
