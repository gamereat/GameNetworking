// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SyncTimeMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SyncTimeMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SyncTimeMessage {

namespace {

const ::google::protobuf::Descriptor* ConnectTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConnectConfirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConnectConfirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientConfirmConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientConfirmConnect_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SyncTimeMessage_2eproto() {
  protobuf_AddDesc_SyncTimeMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SyncTimeMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectTime_descriptor_ = file->message_type(0);
  static const int ConnectTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectTime, clienttimesinceepoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectTime, timetaketorecivelastmessage_),
  };
  ConnectTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectTime_descriptor_,
      ConnectTime::default_instance_,
      ConnectTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectTime));
  ServerConnectConfirm_descriptor_ = file->message_type(1);
  static const int ServerConnectConfirm_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConnectConfirm, serverstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConnectConfirm, gametimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConnectConfirm, playernumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConnectConfirm, playersconnected_),
  };
  ServerConnectConfirm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerConnectConfirm_descriptor_,
      ServerConnectConfirm::default_instance_,
      ServerConnectConfirm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConnectConfirm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConnectConfirm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerConnectConfirm));
  ClientConfirmConnect_descriptor_ = file->message_type(2);
  static const int ClientConfirmConnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfirmConnect, connecttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfirmConnect, clientnumber_),
  };
  ClientConfirmConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientConfirmConnect_descriptor_,
      ClientConfirmConnect::default_instance_,
      ClientConfirmConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfirmConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfirmConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientConfirmConnect));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SyncTimeMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectTime_descriptor_, &ConnectTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerConnectConfirm_descriptor_, &ServerConnectConfirm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientConfirmConnect_descriptor_, &ClientConfirmConnect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SyncTimeMessage_2eproto() {
  delete ConnectTime::default_instance_;
  delete ConnectTime_reflection_;
  delete ServerConnectConfirm::default_instance_;
  delete ServerConnectConfirm_reflection_;
  delete ClientConfirmConnect::default_instance_;
  delete ClientConfirmConnect_reflection_;
}

void protobuf_AddDesc_SyncTimeMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025SyncTimeMessage.proto\022\017SyncTimeMessage"
    "\"P\n\013ConnectTime\022\034\n\024clientTimeSinceEpoch\030"
    "\001 \002(\002\022#\n\033timeTakeToReciveLastMessage\030\002 \002"
    "(\002\"r\n\024ServerConnectConfirm\022\027\n\017serverStar"
    "tTime\030\001 \002(\003\022\021\n\tgameTimer\030\002 \002(\003\022\024\n\014player"
    "Number\030\003 \002(\005\022\030\n\020playersConnected\030\004 \002(\005\"_"
    "\n\024ClientConfirmConnect\0221\n\013connectTime\030\002 "
    "\002(\0132\034.SyncTimeMessage.ConnectTime\022\024\n\014cli"
    "entNumber\030\001 \002(\005", 335);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SyncTimeMessage.proto", &protobuf_RegisterTypes);
  ConnectTime::default_instance_ = new ConnectTime();
  ServerConnectConfirm::default_instance_ = new ServerConnectConfirm();
  ClientConfirmConnect::default_instance_ = new ClientConfirmConnect();
  ConnectTime::default_instance_->InitAsDefaultInstance();
  ServerConnectConfirm::default_instance_->InitAsDefaultInstance();
  ClientConfirmConnect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SyncTimeMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SyncTimeMessage_2eproto {
  StaticDescriptorInitializer_SyncTimeMessage_2eproto() {
    protobuf_AddDesc_SyncTimeMessage_2eproto();
  }
} static_descriptor_initializer_SyncTimeMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ConnectTime::kClientTimeSinceEpochFieldNumber;
const int ConnectTime::kTimeTakeToReciveLastMessageFieldNumber;
#endif  // !_MSC_VER

ConnectTime::ConnectTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncTimeMessage.ConnectTime)
}

void ConnectTime::InitAsDefaultInstance() {
}

ConnectTime::ConnectTime(const ConnectTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SyncTimeMessage.ConnectTime)
}

void ConnectTime::SharedCtor() {
  _cached_size_ = 0;
  clienttimesinceepoch_ = 0;
  timetaketorecivelastmessage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectTime::~ConnectTime() {
  // @@protoc_insertion_point(destructor:SyncTimeMessage.ConnectTime)
  SharedDtor();
}

void ConnectTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectTime_descriptor_;
}

const ConnectTime& ConnectTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SyncTimeMessage_2eproto();
  return *default_instance_;
}

ConnectTime* ConnectTime::default_instance_ = NULL;

ConnectTime* ConnectTime::New() const {
  return new ConnectTime;
}

void ConnectTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConnectTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(clienttimesinceepoch_, timetaketorecivelastmessage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncTimeMessage.ConnectTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float clientTimeSinceEpoch = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clienttimesinceepoch_)));
          set_has_clienttimesinceepoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_timeTakeToReciveLastMessage;
        break;
      }

      // required float timeTakeToReciveLastMessage = 2;
      case 2: {
        if (tag == 21) {
         parse_timeTakeToReciveLastMessage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timetaketorecivelastmessage_)));
          set_has_timetaketorecivelastmessage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncTimeMessage.ConnectTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncTimeMessage.ConnectTime)
  return false;
#undef DO_
}

void ConnectTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncTimeMessage.ConnectTime)
  // required float clientTimeSinceEpoch = 1;
  if (has_clienttimesinceepoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->clienttimesinceepoch(), output);
  }

  // required float timeTakeToReciveLastMessage = 2;
  if (has_timetaketorecivelastmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->timetaketorecivelastmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncTimeMessage.ConnectTime)
}

::google::protobuf::uint8* ConnectTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncTimeMessage.ConnectTime)
  // required float clientTimeSinceEpoch = 1;
  if (has_clienttimesinceepoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->clienttimesinceepoch(), target);
  }

  // required float timeTakeToReciveLastMessage = 2;
  if (has_timetaketorecivelastmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->timetaketorecivelastmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncTimeMessage.ConnectTime)
  return target;
}

int ConnectTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float clientTimeSinceEpoch = 1;
    if (has_clienttimesinceepoch()) {
      total_size += 1 + 4;
    }

    // required float timeTakeToReciveLastMessage = 2;
    if (has_timetaketorecivelastmessage()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectTime::MergeFrom(const ConnectTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienttimesinceepoch()) {
      set_clienttimesinceepoch(from.clienttimesinceepoch());
    }
    if (from.has_timetaketorecivelastmessage()) {
      set_timetaketorecivelastmessage(from.timetaketorecivelastmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectTime::CopyFrom(const ConnectTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConnectTime::Swap(ConnectTime* other) {
  if (other != this) {
    std::swap(clienttimesinceepoch_, other->clienttimesinceepoch_);
    std::swap(timetaketorecivelastmessage_, other->timetaketorecivelastmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectTime_descriptor_;
  metadata.reflection = ConnectTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerConnectConfirm::kServerStartTimeFieldNumber;
const int ServerConnectConfirm::kGameTimerFieldNumber;
const int ServerConnectConfirm::kPlayerNumberFieldNumber;
const int ServerConnectConfirm::kPlayersConnectedFieldNumber;
#endif  // !_MSC_VER

ServerConnectConfirm::ServerConnectConfirm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncTimeMessage.ServerConnectConfirm)
}

void ServerConnectConfirm::InitAsDefaultInstance() {
}

ServerConnectConfirm::ServerConnectConfirm(const ServerConnectConfirm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SyncTimeMessage.ServerConnectConfirm)
}

void ServerConnectConfirm::SharedCtor() {
  _cached_size_ = 0;
  serverstarttime_ = GOOGLE_LONGLONG(0);
  gametimer_ = GOOGLE_LONGLONG(0);
  playernumber_ = 0;
  playersconnected_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConnectConfirm::~ServerConnectConfirm() {
  // @@protoc_insertion_point(destructor:SyncTimeMessage.ServerConnectConfirm)
  SharedDtor();
}

void ServerConnectConfirm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerConnectConfirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConnectConfirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConnectConfirm_descriptor_;
}

const ServerConnectConfirm& ServerConnectConfirm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SyncTimeMessage_2eproto();
  return *default_instance_;
}

ServerConnectConfirm* ServerConnectConfirm::default_instance_ = NULL;

ServerConnectConfirm* ServerConnectConfirm::New() const {
  return new ServerConnectConfirm;
}

void ServerConnectConfirm::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerConnectConfirm*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(serverstarttime_, playersconnected_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerConnectConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncTimeMessage.ServerConnectConfirm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 serverStartTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverstarttime_)));
          set_has_serverstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameTimer;
        break;
      }

      // required int64 gameTimer = 2;
      case 2: {
        if (tag == 16) {
         parse_gameTimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gametimer_)));
          set_has_gametimer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerNumber;
        break;
      }

      // required int32 playerNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_playerNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernumber_)));
          set_has_playernumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playersConnected;
        break;
      }

      // required int32 playersConnected = 4;
      case 4: {
        if (tag == 32) {
         parse_playersConnected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playersconnected_)));
          set_has_playersconnected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncTimeMessage.ServerConnectConfirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncTimeMessage.ServerConnectConfirm)
  return false;
#undef DO_
}

void ServerConnectConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncTimeMessage.ServerConnectConfirm)
  // required int64 serverStartTime = 1;
  if (has_serverstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->serverstarttime(), output);
  }

  // required int64 gameTimer = 2;
  if (has_gametimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gametimer(), output);
  }

  // required int32 playerNumber = 3;
  if (has_playernumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playernumber(), output);
  }

  // required int32 playersConnected = 4;
  if (has_playersconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playersconnected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncTimeMessage.ServerConnectConfirm)
}

::google::protobuf::uint8* ServerConnectConfirm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncTimeMessage.ServerConnectConfirm)
  // required int64 serverStartTime = 1;
  if (has_serverstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->serverstarttime(), target);
  }

  // required int64 gameTimer = 2;
  if (has_gametimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gametimer(), target);
  }

  // required int32 playerNumber = 3;
  if (has_playernumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playernumber(), target);
  }

  // required int32 playersConnected = 4;
  if (has_playersconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playersconnected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncTimeMessage.ServerConnectConfirm)
  return target;
}

int ServerConnectConfirm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 serverStartTime = 1;
    if (has_serverstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverstarttime());
    }

    // required int64 gameTimer = 2;
    if (has_gametimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gametimer());
    }

    // required int32 playerNumber = 3;
    if (has_playernumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernumber());
    }

    // required int32 playersConnected = 4;
    if (has_playersconnected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playersconnected());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConnectConfirm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerConnectConfirm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerConnectConfirm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerConnectConfirm::MergeFrom(const ServerConnectConfirm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverstarttime()) {
      set_serverstarttime(from.serverstarttime());
    }
    if (from.has_gametimer()) {
      set_gametimer(from.gametimer());
    }
    if (from.has_playernumber()) {
      set_playernumber(from.playernumber());
    }
    if (from.has_playersconnected()) {
      set_playersconnected(from.playersconnected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerConnectConfirm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConnectConfirm::CopyFrom(const ServerConnectConfirm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConnectConfirm::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerConnectConfirm::Swap(ServerConnectConfirm* other) {
  if (other != this) {
    std::swap(serverstarttime_, other->serverstarttime_);
    std::swap(gametimer_, other->gametimer_);
    std::swap(playernumber_, other->playernumber_);
    std::swap(playersconnected_, other->playersconnected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerConnectConfirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConnectConfirm_descriptor_;
  metadata.reflection = ServerConnectConfirm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientConfirmConnect::kConnectTimeFieldNumber;
const int ClientConfirmConnect::kClientNumberFieldNumber;
#endif  // !_MSC_VER

ClientConfirmConnect::ClientConfirmConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncTimeMessage.ClientConfirmConnect)
}

void ClientConfirmConnect::InitAsDefaultInstance() {
  connecttime_ = const_cast< ::SyncTimeMessage::ConnectTime*>(&::SyncTimeMessage::ConnectTime::default_instance());
}

ClientConfirmConnect::ClientConfirmConnect(const ClientConfirmConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SyncTimeMessage.ClientConfirmConnect)
}

void ClientConfirmConnect::SharedCtor() {
  _cached_size_ = 0;
  connecttime_ = NULL;
  clientnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientConfirmConnect::~ClientConfirmConnect() {
  // @@protoc_insertion_point(destructor:SyncTimeMessage.ClientConfirmConnect)
  SharedDtor();
}

void ClientConfirmConnect::SharedDtor() {
  if (this != default_instance_) {
    delete connecttime_;
  }
}

void ClientConfirmConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientConfirmConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientConfirmConnect_descriptor_;
}

const ClientConfirmConnect& ClientConfirmConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SyncTimeMessage_2eproto();
  return *default_instance_;
}

ClientConfirmConnect* ClientConfirmConnect::default_instance_ = NULL;

ClientConfirmConnect* ClientConfirmConnect::New() const {
  return new ClientConfirmConnect;
}

void ClientConfirmConnect::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_connecttime()) {
      if (connecttime_ != NULL) connecttime_->::SyncTimeMessage::ConnectTime::Clear();
    }
    clientnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientConfirmConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncTimeMessage.ClientConfirmConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clientNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientnumber_)));
          set_has_clientnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_connectTime;
        break;
      }

      // required .SyncTimeMessage.ConnectTime connectTime = 2;
      case 2: {
        if (tag == 18) {
         parse_connectTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connecttime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncTimeMessage.ClientConfirmConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncTimeMessage.ClientConfirmConnect)
  return false;
#undef DO_
}

void ClientConfirmConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncTimeMessage.ClientConfirmConnect)
  // required int32 clientNumber = 1;
  if (has_clientnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientnumber(), output);
  }

  // required .SyncTimeMessage.ConnectTime connectTime = 2;
  if (has_connecttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connecttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncTimeMessage.ClientConfirmConnect)
}

::google::protobuf::uint8* ClientConfirmConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncTimeMessage.ClientConfirmConnect)
  // required int32 clientNumber = 1;
  if (has_clientnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientnumber(), target);
  }

  // required .SyncTimeMessage.ConnectTime connectTime = 2;
  if (has_connecttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->connecttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncTimeMessage.ClientConfirmConnect)
  return target;
}

int ClientConfirmConnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SyncTimeMessage.ConnectTime connectTime = 2;
    if (has_connecttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connecttime());
    }

    // required int32 clientNumber = 1;
    if (has_clientnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConfirmConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientConfirmConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientConfirmConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientConfirmConnect::MergeFrom(const ClientConfirmConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connecttime()) {
      mutable_connecttime()->::SyncTimeMessage::ConnectTime::MergeFrom(from.connecttime());
    }
    if (from.has_clientnumber()) {
      set_clientnumber(from.clientnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientConfirmConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConfirmConnect::CopyFrom(const ClientConfirmConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConfirmConnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_connecttime()) {
    if (!this->connecttime().IsInitialized()) return false;
  }
  return true;
}

void ClientConfirmConnect::Swap(ClientConfirmConnect* other) {
  if (other != this) {
    std::swap(connecttime_, other->connecttime_);
    std::swap(clientnumber_, other->clientnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientConfirmConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientConfirmConnect_descriptor_;
  metadata.reflection = ClientConfirmConnect_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SyncTimeMessage

// @@protoc_insertion_point(global_scope)
